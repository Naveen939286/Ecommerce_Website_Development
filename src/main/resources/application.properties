spring.application.name=sb-ecom
#Need we are using elastic beanstalk
server.port=5000
#Auto configuration done by the h2 data base
#spring.h2.console.enabled=true
#If we want to make our database url constant write the below property.
#jdbc is the connection protocol. h2 is the database mem means it is inmemory database test is the name of the inmemory database
#spring.datasource.url=jdbc:h2:mem:test

#---------- MYSQL Data base

#This specifies JDBC url to connect to the MYSQL Database
spring.datasource.url=jdbc:mysql://myapplicationdb.c72q8c4i4r2z.us-east-1.rds.amazonaws.com:3306/ecommerce
#user name
spring.datasource.username=root
##password
spring.datasource.password=12345
##This property configures the behaviour of hibernate with respect to Data Base
##This update means hibernate will automatically update the DataBase schema to match the entity mappings.
spring.jpa.hibernate.ddl-auto=update
#
##This line shows the SQL that being generated behind the scenes
##This shows the query generation in hibernate
##This automatically done by our Spring Boot.
#spring.jpa.show-sql=true
#
##This tells hibernate to use the SQL dialect and SQL dialect is nothing but rules and optimization specific to my sql DB .
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

#We add this path in this application . properties instead od service implementation in future we need to change the path it is available here easily.
#We can use this in different controllers and Services.


#---------postgre sql Data Base
#instead of pointing our application to localhost change to point to the remote server
#replace the localhost with the url that we get after creating the RDS instance.
#postgres is the default data base that install when ever we install the application DB.
#spring.datasource.url=jdbc:postgresql://myapplication.c72q8c4i4r2z.us-east-1.rds.amazonaws.com:5432/postgres
#spring.datasource.username=postgres
#spring.datasource.password=12345
#
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect


project.image=images/




#Format the generated SQL
#spring.jpa.properties.hibernate.format_sql=true

#Every time we run the previous schema (Table is destroyed and new one is created we can made change by using the below property)
#if we put update for the property only when update is done then only modifications done in the table otherwise no.
#spring.jpa.hibernate.ddl-auto=update

#Secreat key of our choice
spring.app.jwtSecret=mySecreatKey123912738jhtfytghmhtfhfchchhgcmhjrdyrd
#JWT key expiration milli seconds
spring.app.jwtExpirationMs=300000

spring.ecom.app.jwtCookieName =springBootEcom


#Here we are enabling logging here
#Having security related logs and application related logs
#logging.level.org.springframework=DEBUG
#logging.level.org.hibernate.SQL=DEBUG
#logging.level.org.springframework.security=DEBUG
#logging.level.com.ecommerce.project=DEBUG
